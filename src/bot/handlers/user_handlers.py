import time
from collections import defaultdict
from aiogram import F, types, Dispatcher, Router
from aiogram.filters import CommandStart

from bot.keyboards.user_keyboards import get_main_kb
from bot.services.data_processing import ProcessData

data_processor = ProcessData()

user_last_request = defaultdict(float)
RATE_LIMIT = 5

async def cmd_start(msg: types.Message) -> None:
    """Command start

    Args:
        msg (types.Message): msg object
    """
    reply_text = (f'–ü—Ä–∏–≤–µ—Ç, {msg.from_user.full_name}, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?\n'
                   '\n'
                   '–Ø –º–æ–≥—É:\n'
                   '\n'
                   '    1. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–µ –∞–Ω–∏–º–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n'
                   '    2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–µ –∞–Ω–∏–º–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏\n'
                   '    3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ —Ç–æ–ø –æ–Ω–≥–æ–∏–Ω–≥–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n'
                   '    4. –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É\n'
                   '\n'
                   '–ß–µ–≥–æ –∂–µ –∂–µ–ª–∞–µ—Ç —Ç–≤–æ—è –¥—É—à–∞?')

    await msg.answer(
        text=reply_text,
        reply_markup=get_main_kb()
    )


async def handle_main_menu(msg: types.Message) -> None:
    user_id = msg.from_user.id
    current_time = time.time()

    if current_time - user_last_request[user_id] < RATE_LIMIT:
        await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
        return

    user_last_request[user_id] = current_time

    await msg.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    result = None
    if msg.text == '–°–∞–º—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ–Ω–≥–æ–∏–Ω–≥–∏':
        result = data_processor.format_output(None, 'airing')
    elif msg.text == '–¢–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É':
        result = data_processor.format_output(None, 'all')
    elif msg.text == '–¢–æ–ø –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏':
        result = data_processor.format_output(None, 'bypopularity')
    elif msg.text == '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':
        # –ó–∞–≥–ª—É—à–∫–∞
        result = "üéØ –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"

    if result:
        await msg.answer(result)
    else:
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


def register_user_handlers(dp: Dispatcher) -> None:

    router = Router()
    router.message.register(cmd_start, CommandStart())

    router.message.register(
        handle_main_menu,
        F.text.in_([
            '–°–∞–º—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ–Ω–≥–æ–∏–Ω–≥–∏',
            '–¢–æ–ø –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
            '–¢–æ–ø –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
            '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
        ])
    )

    dp.include_router(router)


